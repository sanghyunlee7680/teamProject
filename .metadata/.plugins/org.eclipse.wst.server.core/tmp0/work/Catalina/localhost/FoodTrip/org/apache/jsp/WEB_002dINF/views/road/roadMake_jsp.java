/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.97
 * Generated at: 2024-12-18 05:58:45 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.road;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.spring.domain.Member;

public final class roadMake_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/WEB-INF/views/menu/menu.jsp", Long.valueOf(1734490594000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("com.spring.domain.Member");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, false, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/FoodTrip/resources/css/menu.css\"/>\r\n");
      out.write("<style>\r\n");
      out.write("	.markerlist{\r\n");
      out.write("		width:100%;\r\n");
      out.write("		list-style : none;\r\n");
      out.write("		display:flex;\r\n");
      out.write("		flex-wrap:wrap;\r\n");
      out.write("	}\r\n");
      out.write("	.listCh {\r\n");
      out.write("		margin-top: 10px;\r\n");
      out.write("		margin-left: 20px;\r\n");
      out.write("		margin-bottom: 10px;\r\n");
      out.write("		\r\n");
      out.write("	}\r\n");
      out.write("	.wrap {position: absolute;left: 0;bottom: 40px;width: 288px;height: 132px;margin-left: -144px;text-align: left;overflow: hidden;font-size: 12px;font-family: 'Malgun Gothic', dotum, '돋움', sans-serif;line-height: 1.5;}\r\n");
      out.write("    .wrap * {padding: 0;margin: 0;}\r\n");
      out.write("    .wrap .info {width: 286px;height: 120px;border-radius: 5px;border-bottom: 2px solid #ccc;border-right: 1px solid #ccc;overflow: hidden;background: #fff;}\r\n");
      out.write("    .wrap .info:nth-child(1) {border: 0;box-shadow: 0px 1px 2px #888;}\r\n");
      out.write("    .info .title {padding: 5px 0 0 10px;height: 30px;background: #eee;border-bottom: 1px solid #ddd;font-size: 18px;font-weight: bold;}\r\n");
      out.write("    .info .close {position: absolute;top: 10px;right: 10px;color: #888;width: 17px;height: 17px;background: url('https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/overlay_close.png');}\r\n");
      out.write("    .info .close:hover {cursor: pointer;}\r\n");
      out.write("    .info .body {position: relative;overflow: hidden;}\r\n");
      out.write("    .info .desc {position: relative;margin: 13px 0 0 90px;height: 75px;}\r\n");
      out.write("    .desc .ellipsis {overflow: hidden;text-overflow: ellipsis;white-space: nowrap;}\r\n");
      out.write("    .desc .jibun {font-size: 11px;color: #888;margin-top: -2px;}\r\n");
      out.write("    .info .img {position: absolute;top: 6px;left: 5px;width: 73px;height: 71px;border: 1px solid #ddd;color: #888;overflow: hidden;}\r\n");
      out.write("    .info:after {content: '';position: absolute;margin-left: -12px;left: 50%;bottom: 0;width: 22px;height: 12px;background: url('https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/vertex_white.png')}\r\n");
      out.write("    .info .link {color: #5085BB;}\r\n");
      out.write("    \r\n");
      out.write("    	.contain{\r\n");
      out.write("		display:flex;\r\n");
      out.write("	}\r\n");
      out.write("	.listBox{\r\n");
      out.write("		width:250px;\r\n");
      out.write("		height:800px;\r\n");
      out.write("		position: relative;\r\n");
      out.write("		overflow:hidden;\r\n");
      out.write("		background-color: #EFF2FB;\r\n");
      out.write("		border:1px solid black;\r\n");
      out.write("	}\r\n");
      out.write("	.listBox > *, ul{\r\n");
      out.write("		padding:0;\r\n");
      out.write("		margin:0 auto;\r\n");
      out.write("	}\r\n");
      out.write("	.listbody{\r\n");
      out.write("		height:100%;\r\n");
      out.write("		position:relative;\r\n");
      out.write("		overflow-y:auto;\r\n");
      out.write("	}\r\n");
      out.write("	.tablist{\r\n");
      out.write("		list-style:none;\r\n");
      out.write("		display:flex;\r\n");
      out.write("		justify-content:space-between;\r\n");
      out.write("	}\r\n");
      out.write("	.tablist button{\r\n");
      out.write("		width:100%;\r\n");
      out.write("	}\r\n");
      out.write("	.tablist div{\r\n");
      out.write("		width:30%;\r\n");
      out.write("		margin:0 10px 0 10px;\r\n");
      out.write("		border:1px solid rgba(0,0,0,0.3);\r\n");
      out.write("	}\r\n");
      out.write("	.markerList{\r\n");
      out.write("		display:flex;\r\n");
      out.write("		flex-direction: column;\r\n");
      out.write("		list-style : none;\r\n");
      out.write("	}\r\n");
      out.write("	.listCh{\r\n");
      out.write("		width:80%;\r\n");
      out.write("		margin-top: 10px;\r\n");
      out.write("		margin-left: 20px;\r\n");
      out.write("		margin-bottom: 10px;\r\n");
      out.write("	}\r\n");
      out.write("	.listblock{\r\n");
      out.write("		position:absolute;\r\n");
      out.write("		top:0;\r\n");
      out.write("		left:0;\r\n");
      out.write("	}\r\n");
      out.write("	div ul{\r\n");
      out.write("		list-style:none;\r\n");
      out.write("	}\r\n");
      out.write("	.btnList{\r\n");
      out.write("		display:flex;\r\n");
      out.write("		justify-content:space-between;\r\n");
      out.write("	}\r\n");
      out.write("	.btnList a{\r\n");
      out.write("		color:rgb(2,7,21);\r\n");
      out.write("		text-align:center;\r\n");
      out.write("		text-decoration:none;\r\n");
      out.write("		background-color:#E6E6E6;\r\n");
      out.write("		padding:3px;\r\n");
      out.write("		border-radius:10px;\r\n");
      out.write("	}\r\n");
      out.write("	.pointName{\r\n");
      out.write("		font-weight:700;\r\n");
      out.write("		text-decoration:none;\r\n");
      out.write("		color:black;\r\n");
      out.write("	}\r\n");
      out.write("	.category{\r\n");
      out.write("		font-size:11px;\r\n");
      out.write("	}\r\n");
      out.write("	.mapBox{\r\n");
      out.write("    	width:100%;\r\n");
      out.write("    	position:relative;\r\n");
      out.write("    }\r\n");
      out.write("    .channel{\r\n");
      out.write("    	margin:0 auto;\r\n");
      out.write("    	padding:10px 30px;\r\n");
      out.write("    	display:flex;\r\n");
      out.write("    	justify-content:center;\r\n");
      out.write("    	align-items:center;\r\n");
      out.write("    	position:absolute;\r\n");
      out.write("    	top:0;\r\n");
      out.write("    	left:0;\r\n");
      out.write("    	height: 70px;\r\n");
      out.write("    	width:100%;\r\n");
      out.write("    	background-color: rgba(0,0,0,0.3);\r\n");
      out.write("    	z-index:1000;	\r\n");
      out.write("    }\r\n");
      out.write("    .channel div{\r\n");
      out.write("    	margin: 0 30px;\r\n");
      out.write("    	color:white;\r\n");
      out.write("    	height:40%;\r\n");
      out.write("    }\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

   HttpSession session = request.getSession(false);
   Member sessionId = null;
   String adminCheck = null;
   if(session != null){
      sessionId = (Member)session.getAttribute("sessionId");
      adminCheck = (String)sessionId.getNickName();
      System.out.println("게시글 작성 폼 세션 널아님!!");
      System.out.println("닉네임 : " + sessionId.getNickName());
      System.out.println("참거짓 : " + sessionId != null);
      System.out.println("참거짓 : " + adminCheck.equals("admin"));
   }

      out.write("\r\n");
      out.write("\r\n");
      out.write("<div style=\"display:flex\">\r\n");
   if(sessionId != null && adminCheck.equals("admin")){ 
      out.write("\r\n");
      out.write("   <div id=\"menublock\">\r\n");
      out.write("      <a href=\"/FoodTrip/marker/test\">마커 생성</a>\r\n");
      out.write("      <a href=\"/FoodTrip/marker/readalljson\">마커 전체 가져오기</a>\r\n");
      out.write("      <a href=\"/FoodTrip/road/makeRoad\">코스 생성</a>\r\n");
      out.write("   </div>\r\n");
      out.write("   ");
} 
      out.write("\r\n");
      out.write("   <div id=\"menublock\">\r\n");
      out.write("      <a href=\"/FoodTrip/road/readRoad\">코스 전체보기</a>\r\n");
      out.write("      <a href=\"/FoodTrip/board/boards\">리뷰게시판</a>\r\n");
      out.write("   </div>\r\n");
      out.write("   <div id=\"menublock\">\r\n");
      out.write("      ");

      if(sessionId != null && sessionId.getNickName() != null && !sessionId.getNickName().isEmpty()){
      
      out.write("\r\n");
      out.write("         <a href=\"/FoodTrip/member/logout\">로그아웃</a>\r\n");
      out.write("         <a href=\"/FoodTrip/member/update\">회원정보수정</a>\r\n");
      out.write("      ");
}else{
      out.write("\r\n");
      out.write("         <a href=\"/FoodTrip/member/login\">로그인</a>\r\n");
      out.write("         <a href=\"/FoodTrip/member/email\">회원가입</a>\r\n");
      out.write("      ");
} 
      out.write("\r\n");
      out.write("   </div>\r\n");
      out.write("</div>");
      out.write("\r\n");
      out.write("	<h2> 코스 만들기 ! </h2>\r\n");
      out.write("	<div id=\"menu\">\r\n");
      out.write("		<button id=\"create\">코스 생성</button>\r\n");
      out.write("		<button id=\"reset\">리셋</button>\r\n");
      out.write("		<select id=\"choice\">\r\n");
      out.write("			<option value=\"chicken\">치킨</option>\r\n");
      out.write("			<option value=\"chinese\">중식</option>\r\n");
      out.write("			<option value=\"pasta\">파스타</option>\r\n");
      out.write("			<option value=\"snack\">분식</option>\r\n");
      out.write("			<option value=\"disert\">디저트</option>\r\n");
      out.write("		</select>\r\n");
      out.write("	</div>\r\n");
      out.write("<div class=\"contain\">\r\n");
      out.write("	<div class=\"listBox\">\r\n");
      out.write("		<div class=\"tablist\">\r\n");
      out.write("			<button class=\"tourtab\" id=\"TU\">관광지</button>\r\n");
      out.write("			<button class=\"resttab\" id=\"RS\">식당</button>\r\n");
      out.write("			<button class=\"staytab\" id=\"HT\">숙소</button>\r\n");
      out.write("		</div>	\r\n");
      out.write("		<div class=\"listbody\">\r\n");
      out.write("			<div class=\"listblock\">\r\n");
      out.write("				<ul class=\"mklist\">\r\n");
      out.write("\r\n");
      out.write("				</ul>\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("	<div class=\"mapBox\">\r\n");
      out.write("		<div id=map style=\"width:100%;height:800px;\">\r\n");
      out.write("			<!-- 지도 공간  -->\r\n");
      out.write("			\r\n");
      out.write("		</div>\r\n");
      out.write("		<div class=\"channel\">\r\n");
      out.write("		\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("</div>\r\n");
      out.write("	<div>\r\n");
      out.write("		코스에 대한 설명 : \r\n");
      out.write("		<textarea cols=\"100\" rows=\"10\" id=\"description\"></textarea>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	<script src=\"http://code.jquery.com/jquery-latest.min.js\"></script>\r\n");
      out.write("	<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=a8fb3e9990ea2c741f7c154e957f99be\"></script>\r\n");
      out.write("	<script>\r\n");
      out.write("	\r\n");
      out.write("	//맵 변수\r\n");
      out.write("	var mapContainer;\r\n");
      out.write("	var map;\r\n");
      out.write("	\r\n");
      out.write("	//태그 관련 \r\n");
      out.write("	//	select 태그 \r\n");
      out.write("	var choice = document.querySelector(\"#choice\");\r\n");
      out.write("	\r\n");
      out.write("	//	ul 태그 : 선택한 카테고리의 리스트가 들어갈 부모\r\n");
      out.write("	var tourParents = document.querySelector(\".tourlist\");\r\n");
      out.write("	var stayParents = document.querySelector(\".staylist\");\r\n");
      out.write("	var restParents = document.querySelector(\".restlist\");\r\n");
      out.write("	var mkParents = document.querySelector(\".mklist\");\r\n");
      out.write("	\r\n");
      out.write("	//	button 태그 : 선택하는 리스트 카테고리 변경\r\n");
      out.write("	var tourTab = document.querySelector(\".tourtab\");\r\n");
      out.write("	var restTab = document.querySelector(\".resttab\");\r\n");
      out.write("	var stayTab = document.querySelector(\".staytab\");\r\n");
      out.write("	\r\n");
      out.write("	//	div 태그 : 선택한 순서대로 경로가 표시\r\n");
      out.write("	var channel = document.querySelector(\".channel\");\r\n");
      out.write("	\r\n");
      out.write("	//	임시 사용자(관리자) : 여기서 사용자의 닉네임을 받아와 관리자인지 아닌지를 구분해야함\r\n");
      out.write("	var userNick = \"admin\";\r\n");
      out.write("	\r\n");
      out.write("	//		\r\n");
      out.write("	var existNum = false;\r\n");
      out.write("	\r\n");
      out.write("	//	리셋 버튼	\r\n");
      out.write("	var rsbtn = document.querySelector(\"#reset\");\r\n");
      out.write("	//	코스를 모두 만든 후 DB에 저장하는 생성버튼\r\n");
      out.write("	var create = document.querySelector(\"#create\");\r\n");
      out.write("	//	코스에 대한 설명을 첨부할 수 있는 textarea\r\n");
      out.write("	var desc = document.querySelector(\"#description\");\r\n");
      out.write("	\r\n");
      out.write("	//	오버레이 id\r\n");
      out.write("	var overId;	\r\n");
      out.write("	//	마커가 순서대로 찍힐 때 마커에 나타나는 숫자\r\n");
      out.write("	var indexG;\r\n");
      out.write("	//	오버레이 생성 시 담을 변수\r\n");
      out.write("	//var overlay;\r\n");
      out.write("	//	생성된 오버레이 배열\r\n");
      out.write("	var overlayAry= [];\r\n");
      out.write("	\r\n");
      out.write("	//원 반경을 표시하는 변수\r\n");
      out.write("	let activeCircle = null;\r\n");
      out.write("	//반경 내 마커만 저장하는 배열\r\n");
      out.write("	var circleMarkers = [];\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	//	dto 배열	: Marker DTO들의 집합\r\n");
      out.write("	var dtoList = [];\r\n");
      out.write("	//var useDtoList = [];\r\n");
      out.write("	//	Marker DTO : 여기서 Marker는 맵에 표시되는 마커가 아닌 맵에 표시되는 마커의 정보를 담고 있는 DTO, DB 내 marker Table의 한 필드\r\n");
      out.write("	var dtoObj = {\r\n");
      out.write("		\"inputdata\":\"\",\r\n");
      out.write("		\"markerId\":\"\",\r\n");
      out.write("		\"pointX\":\"\",\r\n");
      out.write("		\"pointY\":\"\",\r\n");
      out.write("		\"category\":\"\",\r\n");
      out.write("		\"pointName\":\"\",\r\n");
      out.write("		\"phone\":\"\",\r\n");
      out.write("		\"address\":\"\",\r\n");
      out.write("		\"description\":\"\"\r\n");
      out.write("	};\r\n");
      out.write("	\r\n");
      out.write("	//	지도에 표시되는 마커들의 배열\r\n");
      out.write("	var markers = [];  \r\n");
      out.write("	//	코스 생성을 위해 사용된 마커들이 저장되는 배열\r\n");
      out.write("	var useMarker = [];\r\n");
      out.write("	\r\n");
      out.write("	//	ajax로 보내기 위한 DTO : DB 내 road Table의 한 필드\r\n");
      out.write("	var sendObj = {\r\n");
      out.write("			\"user\":\"\",\r\n");
      out.write("			\"plan\":[],\r\n");
      out.write("			\"createtime\":\"\",\r\n");
      out.write("			\"endtime\":\"\",\r\n");
      out.write("			\"category\":\"\",\r\n");
      out.write("			\"courseSize\":\"\",\r\n");
      out.write("			\"description\":\"\"\r\n");
      out.write("	};\r\n");
      out.write("	\r\n");
      out.write("	//	각 요소 이벤트 할당\r\n");
      out.write("	rsbtn.addEventListener(\"click\", markerRemove);\r\n");
      out.write("	create.addEventListener(\"click\", planCreate);\r\n");
      out.write("	tourTab.addEventListener(\"click\",() => listFilter(event));\r\n");
      out.write("	restTab.addEventListener(\"click\",() => listFilter(event));\r\n");
      out.write("	stayTab.addEventListener(\"click\",() => listFilter(event));\r\n");
      out.write("	\r\n");
      out.write("	//1. 가장 먼저 실행되는 함수, 마커 리스트를 출력 및 지도표시\r\n");
      out.write("	getAllMarker();	\r\n");
      out.write("	makeMap();\r\n");
      out.write("	\r\n");
      out.write("	var sw = new kakao.maps.LatLng(35.180809, 128.547572),\r\n");
      out.write("    	ne = new kakao.maps.LatLng(35.251352, 128.731078);\r\n");
      out.write("	\r\n");
      out.write("	// 지도 출력을 위한 기본적인 코드 -------- START\r\n");
      out.write("	function makeMap(){\r\n");
      out.write("		mapContainer = document.getElementById('map'); // 지도를 표시할 div \r\n");
      out.write("		var mapOption = { \r\n");
      out.write("	        center: new kakao.maps.LatLng(35.2538433, 128.6402609), // 지도의 중심좌표\r\n");
      out.write("	        level: 9 // 지도의 확대 레벨\r\n");
      out.write("	    };\r\n");
      out.write("\r\n");
      out.write("		map = new kakao.maps.Map(mapContainer, mapOption); \r\n");
      out.write("	}\r\n");
      out.write("	// 지도 출력을 위한 기본적인 코드 -------- END\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	/*\r\n");
      out.write("	 *	처음 로딩 시 DB에 저장된 모든 마커를 가져와 리스트로 출력해주는 함수\r\n");
      out.write("	*/\r\n");
      out.write("	function getAllMarker(){\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			url : \"readMkAll\",\r\n");
      out.write("			type : \"get\",\r\n");
      out.write("			success: function(response) {\r\n");
      out.write("		        //console.log(response);  // 응답 구조를 확인\r\n");
      out.write("				JSON.stringify(response);\r\n");
      out.write("				//tourParents.innerHTML = \"\";\r\n");
      out.write("		        // 응답이 배열인지 확인하고, 배열이 비어있지 않으면 첫 번째 항목을 사용\r\n");
      out.write("		        if (Array.isArray(response) && response.length > 0) {\r\n");
      out.write("		        	copyMk(response);\r\n");
      out.write("		        	//addElements(dtoList);\r\n");
      out.write("		        	//tourFilter();\r\n");
      out.write("		        } else {\r\n");
      out.write("		            console.log(\"응답이 비어있거나 배열이 아닙니다.\");\r\n");
      out.write("		        }\r\n");
      out.write("		    },\r\n");
      out.write("		    error: function(xhr, status, error) {\r\n");
      out.write("		        //console.error(\"AJAX 요청 실패:\", error);\r\n");
      out.write("		        console.log(\"상태:\", status);\r\n");
      out.write("		        //console.log(\"응답 텍스트:\", xhr.responseText);\r\n");
      out.write("		    }\r\n");
      out.write("		});\r\n");
      out.write("	}\r\n");
      out.write("		\r\n");
      out.write("	//필터로 탭을 누르면 해당하는 것만 출력\r\n");
      out.write("	function listFilter(event){\r\n");
      out.write("		mkParents.innerHTML =\"\";\r\n");
      out.write("		//console.log(\"event\");\r\n");
      out.write("		//console.log(event);\r\n");
      out.write("		var me = event.target.id;\r\n");
      out.write("		console.log(me);\r\n");
      out.write("		//rmAllMarker(baseMarkers);\r\n");
      out.write("		//rmCircleMarker();\r\n");
      out.write("		for(var i=0; i<dtoList.length; i++)\r\n");
      out.write("		{\r\n");
      out.write("			(function(index){\r\n");
      out.write("				//1. 어떤 것을 출력할지 필터부터.\r\n");
      out.write("				var dataOne = dtoList[index];\r\n");
      out.write("				var cate = dataOne.markerId.substring(0,2);\r\n");
      out.write("				if(cate == me){\r\n");
      out.write("				//2. 필터로 걸러진 것만 출력		\r\n");
      out.write("					//console.log(cate);\r\n");
      out.write("					addElements(dataOne);\r\n");
      out.write("					//addMarker(cate, dataOne);\r\n");
      out.write("				}else if(cate == me){\r\n");
      out.write("					addElements(dataOne);\r\n");
      out.write("					//addMarker(dataOne);\r\n");
      out.write("				}else if(cate == me){\r\n");
      out.write("					addElements(dataOne);\r\n");
      out.write("					//addMarker(cate, dataOne);\r\n");
      out.write("				}\r\n");
      out.write("			})(i);	\r\n");
      out.write("		}\r\n");
      out.write("		//inIn = 1;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	//처음 리스트 생성	\r\n");
      out.write("	function addElements(data){\r\n");
      out.write("		var dataOne = data;\r\n");
      out.write("		var list = document.createElement('li');\r\n");
      out.write("		list.setAttribute(\"class\", \"listCh\");\r\n");
      out.write("\r\n");
      out.write("		//여기서 숙소, 음식점, 관광지를 분류하여 출력\r\n");
      out.write("		var cate = dataOne.markerId.substring(0,2);\r\n");
      out.write("		listMake(list, dataOne);\r\n");
      out.write("		mkParents.appendChild(list);\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("\r\n");
      out.write("	//리스트 만들기\r\n");
      out.write("	function listMake(list, data){\r\n");
      out.write("		//console.log(data.description);\r\n");
      out.write("		list.innerHTML=\"<a href='\"+data.description+\"'class='pointName' target='_blank'>\"\r\n");
      out.write("		+ data.pointName + \"</a><div class='category'>\"+data.category\r\n");
      out.write("		+\"</div><br>\"\r\n");
      out.write("		//\r\n");
      out.write("		var div = document.createElement('div');\r\n");
      out.write("		div.setAttribute(\"class\", \"btnList\");\r\n");
      out.write("		\r\n");
      out.write("		div.innerHTML = \"<a href='/FoodTrip/marker/markerUpdate?id=\"+data.markerId+\"'>수정</a>\";\r\n");
      out.write("		\r\n");
      out.write("		var btn = document.createElement('button');\r\n");
      out.write("		var hr = document.createElement('hr');\r\n");
      out.write("		btn.addEventListener(\"click\", () => addMarker(data));\r\n");
      out.write("		btn.innerHTML = \"등록\";\r\n");
      out.write("		div.appendChild(btn);\r\n");
      out.write("		\r\n");
      out.write("		list.appendChild(div);\r\n");
      out.write("		list.appendChild(hr);\r\n");
      out.write("		//list.innerHTML += `</div>`;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	function createOverlay(marker, data){\r\n");
      out.write("		overId = overlayAry.length;\r\n");
      out.write("	//	console.log(\"overlay data \");\r\n");
      out.write("	//	console.log(data);\r\n");
      out.write("   		// console.log(overlayAry);\r\n");
      out.write("   	//	console.log(\"overid : \"+overId);\r\n");
      out.write("   \r\n");
      out.write("   		var idx = dtoList.indexOf(data);\r\n");
      out.write("   	\r\n");
      out.write("   		//console.log(idx);\r\n");
      out.write("   		// useMarker의 값이 하나이상 존재하고, \r\n");
      out.write("	//	console.log(\"length\");\r\n");
      out.write("   	//	console.log(useMarker.length);\r\n");
      out.write("   	//	console.log(\"indexof\");\r\n");
      out.write("   	//	console.log(useMarker.indexOf(marker));\r\n");
      out.write("   		/*\r\n");
      out.write("   		if(useMarker.length >= 1 && (useMarker.indexOf(marker) !== -1)){\r\n");
      out.write("   			console.log(\"exist !\");\r\n");
      out.write("   			existNum = true;\r\n");
      out.write("   		}\r\n");
      out.write("		*/\r\n");
      out.write("   		var content = '<div class=\"wrap\">' + \r\n");
      out.write("    	'    <div class=\"info\">' + \r\n");
      out.write("        '        <div class=\"title\">' + \r\n");
      out.write("        '            '+ data.pointName + \r\n");
      out.write("        '            <div class=\"close\" onclick=\"closeOverlay('+overId+')\" title=\"닫기\"></div>' + \r\n");
      out.write("        '        </div>' + \r\n");
      out.write("        '        <div class=\"body\">' + \r\n");
      out.write("        '            <div class=\"img\">' +\r\n");
      out.write("        '                <img src=\"https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/thumnail.png\" width=\"73\" height=\"70\">' +\r\n");
      out.write("        '           </div>' + \r\n");
      out.write("        '            <div class=\"desc\">' + \r\n");
      out.write("        '                <div class=\"ellipsis\">'+ data.address +'</div>' +  \r\n");
      out.write("        '                <div><a href='+ data.description  +' target=\"_blank\" class=\"link\">사이트이동</a></div>' + \r\n");
      out.write("        (existNum === true ? '<button onclick=\"addMarker('+idx+')\">등록</button>' : '') + \r\n");
      out.write("        '            </div>' + \r\n");
      out.write("        '        </div>' + \r\n");
      out.write("        '    </div>' +    \r\n");
      out.write("        '</div>';	            	\r\n");
      out.write("    	\r\n");
      out.write("        //	Create Overlay \r\n");
      out.write("    	var overlay = new kakao.maps.CustomOverlay({\r\n");
      out.write("    	    content: content,\r\n");
      out.write("    	    //map: map,\r\n");
      out.write("    	    position: marker.getPosition()       \r\n");
      out.write("    	});\r\n");
      out.write("        \r\n");
      out.write("    	overlayAry.push(overlay);\r\n");
      out.write("		\r\n");
      out.write("    	return overlay;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	function createSubMarkerEvent(overlay, marker){ \r\n");
      out.write("       	kakao.maps.event.addListener(marker, 'click', function() {\r\n");
      out.write("            	overlay.setMap(map);\r\n");
      out.write("       	});\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	function createMarkerEvent(overlay, marker, data){ \r\n");
      out.write("           	kakao.maps.event.addListener(marker, 'click', function() {\r\n");
      out.write("        			getRangeRestTour(marker, data);\r\n");
      out.write("	            	overlay.setMap(map);\r\n");
      out.write("           	});\r\n");
      out.write("	}\r\n");
      out.write("	function closeOverlayAll(){\r\n");
      out.write("		for(var i=0; i<overlayAry.length; i++){\r\n");
      out.write("			overlayAry[i].setMap(null);\r\n");
      out.write("		}\r\n");
      out.write("	}	\r\n");
      out.write("	\r\n");
      out.write("	function closeOverlay(id) {\r\n");
      out.write("		//console.log(\"close!\");\r\n");
      out.write("		//console.log(overlayAry[id]);\r\n");
      out.write("		overlayAry[id].setMap(null);\r\n");
      out.write("	    //overlay.setMap(null);     \r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	function listMake(list, data){\r\n");
      out.write("		//console.log(data.description);\r\n");
      out.write("		list.innerHTML=\"<a href='\"+data.description+\"'class='pointName' target='_blank'>\"\r\n");
      out.write("		+ data.pointName + \"</a><div class='category'>\"+data.category\r\n");
      out.write("		+\"</div><br>\"\r\n");
      out.write("		//\r\n");
      out.write("		var div = document.createElement('div');\r\n");
      out.write("		div.setAttribute(\"class\", \"btnList\");\r\n");
      out.write("		div.innerHTML = \"<a href='/FoodTrip/marker/markerUpdate?id=\"+data.markerId+\"'>수정</a>\";\r\n");
      out.write("		\r\n");
      out.write("		var btn = document.createElement('button');\r\n");
      out.write("		var hr = document.createElement('hr');\r\n");
      out.write("		btn.addEventListener(\"click\", () => addMarker(data));\r\n");
      out.write("		btn.innerHTML = \"등록\";\r\n");
      out.write("		div.appendChild(btn);\r\n");
      out.write("		\r\n");
      out.write("		list.appendChild(div);\r\n");
      out.write("		list.appendChild(hr);\r\n");
      out.write("		//list.innerHTML += `</div>`;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	function addMarker(data){\r\n");
      out.write("		rmAllMarker(circleMarkers);\r\n");
      out.write("		var place=data;\r\n");
      out.write("		if (activeCircle) {\r\n");
      out.write("	        activeCircle.setMap(null);\r\n");
      out.write("	    }\r\n");
      out.write("		if(useMarker.length>=8){\r\n");
      out.write("			alert(\"코스는 최대 8개까지 가능합니다 !\");\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("		if((typeof data) === \"number\"){\r\n");
      out.write("			//alert(\"정수입니다.\");\r\n");
      out.write("			place = dtoList[data];\r\n");
      out.write("		}\r\n");
      out.write("	 	indexG = useMarker.length;\r\n");
      out.write("		//console.log(place.pointX);\r\n");
      out.write("		var bounds = new kakao.maps.LatLngBounds(sw, ne);\r\n");
      out.write("		var placePosition = new kakao.maps.LatLng(place.pointY ,place.pointX);\r\n");
      out.write("		//kakao.maps.LatLngBounds() 내 파라미터를 주지 않으면 빈 공간을 생성한다.\r\n");
      out.write("\r\n");
      out.write("	   	//	중복검사 \r\n");
      out.write("	   	var result = isDuplicate(place);		\r\n");
      out.write("	   	\r\n");
      out.write("		//	중복이 아니면 true\r\n");
      out.write("	   	if(result==0){\r\n");
      out.write("	   	 	var imageSrc = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png', // 마커 이미지 url, 스프라이트 이미지를 씁니다\r\n");
      out.write("	        imageSize = new kakao.maps.Size(36, 37),  // 마커 이미지의 크기\r\n");
      out.write("	        imgOptions =  {\r\n");
      out.write("	   	 		//	이미지가 배열처럼 쭉 있는데, 그 안에서 이미지 크기를 조정해서 사용하는 것\r\n");
      out.write("	            spriteSize : new kakao.maps.Size(36, 691), // 스프라이트 이미지의 크기\r\n");
      out.write("	            spriteOrigin : new kakao.maps.Point(0, (indexG*46)+10), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\r\n");
      out.write("	            offset: new kakao.maps.Point(13, 37) // 마커 좌표에 일치시킬 이미지 내에서의 좌표\r\n");
      out.write("	        },\r\n");
      out.write("	        markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imgOptions),\r\n");
      out.write("	            marker = new kakao.maps.Marker({\r\n");
      out.write("	            position: placePosition, // 마커의 위치\r\n");
      out.write("	            image: markerImage				            \r\n");
      out.write("	        });\r\n");
      out.write("	   	 	closeOverlayAll();\r\n");
      out.write("	   	 	var baseOverlay = createOverlay(marker, place);\r\n");
      out.write("	   	 	createMarkerEvent(baseOverlay, marker, place);\r\n");
      out.write("		    marker.setMap(map); // 지도 위에 마커를 표출합니다\r\n");
      out.write("		   	markers.push(marker);  // 배열에 생성된 마커를 추가합니다\r\n");
      out.write("		   	useMarker.push(place);		//사용자가 지정한 마커가 순서대로 배열에 저장\r\n");
      out.write("		   	//useDtoList.push()\r\n");
      out.write("		   	\r\n");
      out.write("		   	var div = document.createElement('div');\r\n");
      out.write("		   	div.innerHTML = useMarker.length +\". \"+ place.pointName;\r\n");
      out.write("	   	 	channel.appendChild(div);\r\n");
      out.write("	   	 	\r\n");
      out.write("		   	bounds.extend(placePosition);\r\n");
      out.write("		    map.setBounds(bounds);\r\n");
      out.write("	   	}else{\r\n");
      out.write("	   		//	중복이면 false\r\n");
      out.write("	   		alert(\"이미 추가된 코스입니다 !!\");\r\n");
      out.write("	   		return;\r\n");
      out.write("	   	}\r\n");
      out.write("		\r\n");
      out.write("	    if (markers.length > 1) {\r\n");
      out.write("	    	var position = marker.getPosition();\r\n");
      out.write("	        map.panTo(position);\r\n");
      out.write("	    } else {\r\n");
      out.write("	        map.setCenter(placePosition); // 마커가 하나면 중앙 설정\r\n");
      out.write("	    }\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	function addMarkerInCircle(cate, img, data){\r\n");
      out.write("		//console.log(circleMarkers);\r\n");
      out.write("		var placePosition = new kakao.maps.LatLng(data.pointY, data.pointX);\r\n");
      out.write("		var imgfile;\r\n");
      out.write("		if(img==\"카페\"|| img==\"간식\"){\r\n");
      out.write("			imgfile = \"disert\";\r\n");
      out.write("		}else if(img==\"치킨\"){\r\n");
      out.write("			imgfile = \"chicken\";\r\n");
      out.write("		}else if(img==\"분식\"){\r\n");
      out.write("			imgfile = \"tteok\";\r\n");
      out.write("		}else{\r\n");
      out.write("			imgfile = cate;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		var imageSrc = \"/FoodTrip/resources/images/\"+imgfile+\".png\", // 마커 이미지 url, 스프라이트 이미지를 씁니다	\r\n");
      out.write("	        imageSize = new kakao.maps.Size(38, 38),  // 마커 이미지의 크기\r\n");
      out.write("	        imgOptions =  {	      \r\n");
      out.write("	            offset: new kakao.maps.Point(13, 37) // 마커 좌표에 일치시킬 이미지 내에서의 좌표\r\n");
      out.write("	        };\r\n");
      out.write("      	//console.log(\"imageSrc\");\r\n");
      out.write("		//console.log(imageSrc);\r\n");
      out.write("		markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imgOptions),\r\n");
      out.write("	        marker = new kakao.maps.Marker({\r\n");
      out.write("	        map : map,\r\n");
      out.write("	        position: placePosition, // 마커의 위치\r\n");
      out.write("	        image: markerImage				            \r\n");
      out.write("	    });	\r\n");
      out.write("		existNum = true;\r\n");
      out.write("		var subOverlay = createOverlay(marker, data);\r\n");
      out.write("		existNum = false;\r\n");
      out.write("		createSubMarkerEvent(subOverlay, marker);\r\n");
      out.write("		/*\r\n");
      out.write("		kakao.maps.event.addListener(marker, 'click', function () {\r\n");
      out.write("			\r\n");
      out.write("		});\r\n");
      out.write("		*/\r\n");
      out.write("		 \r\n");
      out.write("		 return marker;\r\n");
      out.write("	}\r\n");
      out.write("		\r\n");
      out.write("	function copyMk(markerlist){\r\n");
      out.write("		//console.log(markerlist.length);\r\n");
      out.write("		for(var i=0; i<markerlist.length; i++){\r\n");
      out.write("			(function(index){\r\n");
      out.write("			//객체를 새로 생성하지 않으면 참조 오류가 생긴다.\r\n");
      out.write("			var dtoObj ={\r\n");
      out.write("				\"markerId\":markerlist[index].markerId,\r\n");
      out.write("				\"pointX\": markerlist[index].pointX,\r\n");
      out.write("			    \"pointY\": markerlist[index].pointY,\r\n");
      out.write("				\"category\":markerlist[index].category,\r\n");
      out.write("				\"pointName\":markerlist[index].pointName,\r\n");
      out.write("				\"phone\":markerlist[index].phone,\r\n");
      out.write("				\"address\": markerlist[index].address,\r\n");
      out.write("				\"description\":markerlist[index].description\r\n");
      out.write("			};\r\n");
      out.write("\r\n");
      out.write("			dtoList.push(dtoObj);\r\n");
      out.write("			})(i);\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	//마커 삭제하기\r\n");
      out.write("	function rmAllMarker(markers){\r\n");
      out.write("		//console.log(\"markers.length\");\r\n");
      out.write("		//console.log(markers.length);\r\n");
      out.write("		for(var k=0; k<markers.length; k++){\r\n");
      out.write("			markers[k].setMap(null);	\r\n");
      out.write("		}\r\n");
      out.write("		markers.length = 0;\r\n");
      out.write("		//markers = [];\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	//리셋 버튼 클릭 시 맵에 존재하는 모든 마커 삭제\r\n");
      out.write("	function markerRemove(){\r\n");
      out.write("		closeOverlayAll();\r\n");
      out.write("		channel.innerHTML = \"\";\r\n");
      out.write("		console.log(\"rm IN\");\r\n");
      out.write("		\r\n");
      out.write("		if (activeCircle) {\r\n");
      out.write("			activeCircle.setMap(null);\r\n");
      out.write("		}\r\n");
      out.write("		rmAllMarker(circleMarkers);\r\n");
      out.write("		for ( var i = 0; i < markers.length; i++ ) {\r\n");
      out.write("			markers[i].setMap(null);\r\n");
      out.write("			//useMarker[i].setMap(null);\r\n");
      out.write("			//console.log(userMarker);\r\n");
      out.write("	    }   \r\n");
      out.write("		useMarker.length = 0;\r\n");
      out.write("		indexG=0;\r\n");
      out.write("		//console.log(markers);\r\n");
      out.write("		makeMap();\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	function removeOverlay(){\r\n");
      out.write("		for(var i=0; i<overlayAry.length; i++){\r\n");
      out.write("			overlayAry[i].setMap(null);\r\n");
      out.write("		}\r\n");
      out.write("		overlayAry.length = 0;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	/*\r\n");
      out.write("		배열 내에 같은 마커가 있는지 없는지 검사\r\n");
      out.write("		return : 0 중복 없음 , 1 중복\r\n");
      out.write("	*/\r\n");
      out.write("	function isDuplicate(data){\r\n");
      out.write("		//console.log(data);\r\n");
      out.write("		var compared = 0;\r\n");
      out.write("	//	console.log(\"useMarker.length\"+ useMarker.length);\r\n");
      out.write("		if(useMarker.length <= 0){\r\n");
      out.write("			return 0;\r\n");
      out.write("		}else{\r\n");
      out.write("			for(var i=0; i<useMarker.length; i++){\r\n");
      out.write("			//	console.log(data.markerId +\" | \" + useMarker[i].markerId);\r\n");
      out.write("				if(data.markerId !== useMarker[i].markerId){\r\n");
      out.write("					console.log(\"diff data push\");\r\n");
      out.write("				}else{\r\n");
      out.write("					console.log(\"Same data ...  continue \");\r\n");
      out.write("					return 1;\r\n");
      out.write("				}		\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("		return 0;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	//	코스 생성 클릭 시 컨트롤러로 전송\r\n");
      out.write("	function planCreate(){\r\n");
      out.write("		var data = new Date();\r\n");
      out.write("		sendObj.user = userNick;\r\n");
      out.write("		console.log(\"userncik : \"+ sendObj.user);\r\n");
      out.write("		for(var i=0; i<useMarker.length; i++){\r\n");
      out.write("			sendObj.plan[i] = useMarker[i].markerId;\r\n");
      out.write("		}		\r\n");
      out.write("		//sendObj.createtime = data.toLocaleString(); //사용자가 생성했을 때\r\n");
      out.write("		sendObj.createtime = \"\";\r\n");
      out.write("		sendObj.endtime = \"\";\r\n");
      out.write("		sendObj.category = choice.value;\r\n");
      out.write("		sendObj.courseSize = useMarker.length;\r\n");
      out.write("		sendObj.description = desc.value;\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			url : \"/FoodTrip/road/addCourse\",\r\n");
      out.write("			type : \"post\",\r\n");
      out.write("			data : JSON.stringify(sendObj),\r\n");
      out.write("			contentType : \"application/json\",\r\n");
      out.write("			success : function(response){\r\n");
      out.write("				alert(\"코스 생성 및 저장완료\");\r\n");
      out.write("				closeOverlayAll();\r\n");
      out.write("				markerRemove();\r\n");
      out.write("				objReset();\r\n");
      out.write("			}\r\n");
      out.write("		});\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	function objReset(){\r\n");
      out.write("		sendObj.user = \"\";\r\n");
      out.write("		sendObj.plan = [];		\r\n");
      out.write("		//sendObj.createtime = data.toLocaleString(); //사용자가 생성했을 때\r\n");
      out.write("		sendObj.createtime = \"\";\r\n");
      out.write("		sendObj.endtime = \"\";\r\n");
      out.write("		sendObj.category = \"\";\r\n");
      out.write("		sendObj.courseSize = \"\";\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	function getRangeRestTour(marker, data){\r\n");
      out.write("		markersByCircle(marker, data);\r\n");
      out.write("		//console.log(data.pointX, data.pointY);\r\n");
      out.write("		//console.log(\"rm circle before\");\r\n");
      out.write("		console.log(\"3. range check\");\r\n");
      out.write("		rmAllMarker(circleMarkers);\r\n");
      out.write("		var exist = false;\r\n");
      out.write("		var x = data.pointX;\r\n");
      out.write("		var y = data.pointY;\r\n");
      out.write("		var positionX;\r\n");
      out.write("		var positionY;	\r\n");
      out.write("		var selectValue = choice.value;\r\n");
      out.write("		//dtoList는 마커 전체 리스트\r\n");
      out.write("		for(var i=0; i<dtoList.length; i++){\r\n");
      out.write("			//	카테고리 코드 찾기\r\n");
      out.write("			(function(index){\r\n");
      out.write("				var cate = dtoList[index].markerId.substring(0,2);\r\n");
      out.write("				//카테고리 분할\r\n");
      out.write("				var cateFull = dtoList[index].category;\r\n");
      out.write("				var str1 = cateFull.replaceAll('>', ',');\r\n");
      out.write("				var str2 = str1.split(',');\r\n");
      out.write("				var imgname = str2[1].trim();\r\n");
      out.write("				//console.log(\"============ imgname : \"+imgname);\r\n");
      out.write("				var filterName;\r\n");
      out.write("				 \r\n");
      out.write("				var viewdata = dtoList[index];\r\n");
      out.write("				positionX = viewdata.pointX;\r\n");
      out.write("				positionY = viewdata.pointY;\r\n");
      out.write("				/*\r\n");
      out.write("				<option value=\"chicken\">치킨</option>\r\n");
      out.write("				<option value=\"chinese\">중식</option>\r\n");
      out.write("				<option value=\"pasta\">파스타</option>\r\n");
      out.write("				<option value=\"snack\">분식</option>\r\n");
      out.write("				<option value=\"disert\">디저트</option>			\r\n");
      out.write("				*/\r\n");
      out.write("				if(imgname == \"치킨\"){\r\n");
      out.write("					filterName = \"chicken\";\r\n");
      out.write("				}else if(imgname == \"양식\"){\r\n");
      out.write("					filterName = \"pasta\";\r\n");
      out.write("				}else if(imgname == \"중식\"){\r\n");
      out.write("					filterName = \"chinese\";\r\n");
      out.write("				}else if(imgname == \"카페\" || imgname==\"간식\"){\r\n");
      out.write("					filterName = \"disert\";\r\n");
      out.write("				}else if(imgname == \"분식\"){\r\n");
      out.write("					filterName = \"snack\";\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				var exist = useMarker.indexOf(data);\r\n");
      out.write("				//console.log(\"data ex?\");\r\n");
      out.write("				//console.log(exist);\r\n");
      out.write("				//	음식점 출력\r\n");
      out.write("				//if(cate == \"RS\"){\r\n");
      out.write("				var km = haversineDistance(x, y, positionX, positionY);\r\n");
      out.write("				if(km <= 0.69){\r\n");
      out.write("					//console.log(\"filterName : \"+filterName);\r\n");
      out.write("					//console.log(\"selectValue : \"+selectValue);\r\n");
      out.write("				//console.log(((filterName == selectValue) === true ? 'true' : 'false'));\r\n");
      out.write("					if(filterName == selectValue){\r\n");
      out.write("					var same = false;\r\n");
      out.write("					//console.log(choice.value);\r\n");
      out.write("					//위도 경도 조건 \r\n");
      out.write("					\r\n");
      out.write("						//console.log(\"*****************in : \"+  filterName);\r\n");
      out.write("						for(var q=0; q<useMarker.length; q++){\r\n");
      out.write("							if(useMarker[q]==viewdata){\r\n");
      out.write("								same = true;\r\n");
      out.write("								break;\r\n");
      out.write("							}\r\n");
      out.write("						}\r\n");
      out.write("						if(same !== true){\r\n");
      out.write("							var cMarker = addMarkerInCircle(cate, imgname ,viewdata);\r\n");
      out.write("							circleMarkers.push(cMarker);\r\n");
      out.write("						}\r\n");
      out.write("					}\r\n");
      out.write("				}\r\n");
      out.write("			})(i);\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	function markersByCircle(marker, data) {	//marker는 클릭한 마커\r\n");
      out.write("		const radius = 1000; // 반경 1km (미터 단위)\r\n");
      out.write("	    const centerPosition = marker.getPosition();	//마커의 포지션\r\n");
      out.write("		//console.log(\"2. circle make\");\r\n");
      out.write("	    \r\n");
      out.write("	    //원이 존재하면 삭제\r\n");
      out.write("	    if (activeCircle) {\r\n");
      out.write("	        activeCircle.setMap(null);\r\n");
      out.write("	    }\r\n");
      out.write("	    \r\n");
      out.write("	    // 원 객체 생성\r\n");
      out.write("	    const circle = new kakao.maps.Circle({\r\n");
      out.write("	        center: centerPosition, // 원의 중심좌표\r\n");
      out.write("	        radius: radius, 		// 반경 (미터 단위)\r\n");
      out.write("	        strokeWeight: 2,\r\n");
      out.write("	        strokeColor: '#75B8FA',\r\n");
      out.write("	        strokeOpacity: 1,\r\n");
      out.write("	        strokeStyle: 'solid',\r\n");
      out.write("	        fillColor: '#CFE7FF',\r\n");
      out.write("	        fillOpacity: 0.5\r\n");
      out.write("	    });\r\n");
      out.write("\r\n");
      out.write("	    //클릭한 마커로 화면을 이동하는데 쓰이는 변수\r\n");
      out.write("	    var viewPosition = marker.getPosition();\r\n");
      out.write("	    var bounds = new kakao.maps.LatLngBounds();\r\n");
      out.write("\r\n");
      out.write("	    bounds.extend(viewPosition);\r\n");
      out.write("	    var padding = 0.01; // 여백 정도를 설정 (값을 조정해 멀리 보이도록 설정)\r\n");
      out.write("\r\n");
      out.write("	 	// 마커 위치를 기준으로 상하좌우에 약간의 거리 추가\r\n");
      out.write("	 	bounds.extend(new kakao.maps.LatLng(viewPosition.getLat() + padding, viewPosition.getLng() + padding)); // 북동쪽\r\n");
      out.write("		bounds.extend(new kakao.maps.LatLng(viewPosition.getLat() - padding, viewPosition.getLng() - padding)); // 남서쪽\r\n");
      out.write("\r\n");
      out.write("        map.panTo(viewPosition);\r\n");
      out.write("        map.setBounds(bounds);\r\n");
      out.write("\r\n");
      out.write("	    circle.setMap(map); // 원을 지도에 표시\r\n");
      out.write("	    activeCircle = circle;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	// Haversine 공식에 따른 두 점 간 거리 계산 함수	\r\n");
      out.write("	function haversineDistance(lat1, lon1, lat2, lon2) {\r\n");
      out.write("		const R = 6371;\r\n");
      out.write("	    const toRad = (value) => (value * Math.PI) / 180;\r\n");
      out.write("\r\n");
      out.write("	    const dLat = toRad(lat2 - lat1);\r\n");
      out.write("	    const dLon = toRad(lon2 - lon1);\r\n");
      out.write("\r\n");
      out.write("	    const a = Math.sin(dLat / 2) ** 2 +\r\n");
      out.write("	              Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *\r\n");
      out.write("	              Math.sin(dLon / 2) ** 2;\r\n");
      out.write("\r\n");
      out.write("	    const c = 2 * Math.asin(Math.sqrt(a));\r\n");
      out.write("	    \r\n");
      out.write("	   // console.log(\"math : \" + c);\r\n");
      out.write("	    return R * c; // 거리 (킬로미터)\r\n");
      out.write("	}\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
