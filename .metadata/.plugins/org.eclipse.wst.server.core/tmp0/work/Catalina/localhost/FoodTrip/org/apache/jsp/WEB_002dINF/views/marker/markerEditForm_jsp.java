/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.97
 * Generated at: 2024-12-16 01:46:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.marker;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.spring.domain.*;

public final class markerEditForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/WEB-INF/views/menu/menu.jsp", Long.valueOf(1733993904000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("com.spring.domain");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/FoodTrip/resources/css/menu.css\"/>\r\n");
      out.write("<style>\r\n");
      out.write("	.map_wrap, .map_wrap * {margin:0;padding:0;font-family:'Malgun Gothic',dotum,'돋움',sans-serif;font-size:12px;}\r\n");
      out.write("	.map_wrap a, .map_wrap a:hover, .map_wrap a:active{color:#000;text-decoration: none;}\r\n");
      out.write("	.map_wrap {position:relative;width:70%;height:500px;}\r\n");
      out.write("	#menu_wrap {position:absolute;top:0;left:0;bottom:0;width:250px;margin:10px 0 30px 10px;padding:5px;overflow-y:auto;background:rgba(255, 255, 255, 0.7);z-index: 1;font-size:12px;border-radius: 10px;}\r\n");
      out.write("	.bg_white {background:#fff;}\r\n");
      out.write("	#menu_wrap hr {display: block; height: 1px;border: 0; border-top: 2px solid #5F5F5F;margin:3px 0;}\r\n");
      out.write("	#menu_wrap .option{text-align: center;}\r\n");
      out.write("	#menu_wrap .option p {margin:10px 0;}  \r\n");
      out.write("	#menu_wrap .option button {margin-left:5px;}\r\n");
      out.write("	#placesList li {list-style: none;}\r\n");
      out.write("	#placesList .item {position:relative;border-bottom:1px solid #888;overflow: hidden;cursor: pointer;min-height: 65px;}\r\n");
      out.write("	#placesList .item span {display: block;margin-top:4px;}\r\n");
      out.write("	#placesList .item h5, #placesList .item .info {text-overflow: ellipsis;overflow: hidden;white-space: nowrap;}\r\n");
      out.write("	#placesList .item .info{padding:10px 0 10px 55px;}\r\n");
      out.write("	#placesList .info .gray {color:#8a8a8a;}\r\n");
      out.write("	#placesList .info .jibun {padding-left:26px;background:url(https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/places_jibun.png) no-repeat;}\r\n");
      out.write("	#placesList .info .tel {color:#009900;}\r\n");
      out.write("	#placesList .item .markerbg {float:left;position:absolute;width:36px; height:37px;margin:10px 0 0 10px;background:url(https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png) no-repeat;}\r\n");
      out.write("	#placesList .item .marker_1 {background-position: 0 -10px;}\r\n");
      out.write("	#placesList .item .marker_2 {background-position: 0 -56px;}\r\n");
      out.write("	#placesList .item .marker_3 {background-position: 0 -102px}\r\n");
      out.write("	#placesList .item .marker_4 {background-position: 0 -148px;}\r\n");
      out.write("	#placesList .item .marker_5 {background-position: 0 -194px;}\r\n");
      out.write("	#placesList .item .marker_6 {background-position: 0 -240px;}\r\n");
      out.write("	#placesList .item .marker_7 {background-position: 0 -286px;}\r\n");
      out.write("	#placesList .item .marker_8 {background-position: 0 -332px;}\r\n");
      out.write("	#placesList .item .marker_9 {background-position: 0 -378px;}\r\n");
      out.write("	#placesList .item .marker_10 {background-position: 0 -423px;}\r\n");
      out.write("	#placesList .item .marker_11 {background-position: 0 -470px;}\r\n");
      out.write("	#placesList .item .marker_12 {background-position: 0 -516px;}\r\n");
      out.write("	#placesList .item .marker_13 {background-position: 0 -562px;}\r\n");
      out.write("	#placesList .item .marker_14 {background-position: 0 -608px;}\r\n");
      out.write("	#placesList .item .marker_15 {background-position: 0 -654px;}\r\n");
      out.write("	#pagination {margin:10px auto;text-align: center;}\r\n");
      out.write("	#pagination a {display:inline-block;margin-right:10px;}\r\n");
      out.write("	#pagination .on {font-weight: bold; cursor: default;color:#777;}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");

		Marker marker = (Marker)request.getAttribute("marker");
	
      out.write('\r');
      out.write('\n');
      out.write('	');
      out.write("\r\n");
      out.write("<div style=\"display:flex\">\r\n");
      out.write("	<div id=\"menublock\">\r\n");
      out.write("		<a href=\"/FoodTrip/marker/test\">마커 생성</a>\r\n");
      out.write("		<a href=\"/FoodTrip/marker/readalljson\">마커 전체 가져오기</a>\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	<div id=\"menublock\">\r\n");
      out.write("		<a href=\"/FoodTrip/road/makeRoad\">코스 생성</a>\r\n");
      out.write("		<a href=\"/FoodTrip/road/readRoad\">코스 전체보기</a>\r\n");
      out.write("	</div>\r\n");
      out.write("</div>");
      out.write("	\r\n");
      out.write("	<div class=\"map_wrap\">\r\n");
      out.write("	    <div id=\"map\" style=\"width:100%;height:100%;position:relative;overflow:hidden;\"></div>\r\n");
      out.write("	\r\n");
      out.write("	    <div id=\"menu_wrap\" class=\"bg_white\">\r\n");
      out.write("	        <div class=\"option\">\r\n");
      out.write("	            <div>\r\n");
      out.write("	                <form onsubmit=\"searchPlaces(); return false;\">\r\n");
      out.write("	                    키워드 : <input type=\"text\" id=\"keyword\" size=\"15\"> \r\n");
      out.write("	                    <button type=\"submit\">검색하기</button> \r\n");
      out.write("	                </form>\r\n");
      out.write("	            </div>\r\n");
      out.write("	        </div>\r\n");
      out.write("	        <hr>\r\n");
      out.write("	        <ul id=\"placesList\"></ul>\r\n");
      out.write("	        <div id=\"pagination\"></div>\r\n");
      out.write("	    </div>\r\n");
      out.write("	</div>\r\n");
      out.write("	<div>\r\n");
      out.write("		<form onsubmit=\"return false;\">\r\n");
      out.write("			<p>\r\n");
      out.write("				<label>마커ID</label>\r\n");
      out.write("				<input id=\"markerId\" value=\"");
      out.print(marker.getmarkerId() );
      out.write("\" readOnly/>\r\n");
      out.write("			</p>\r\n");
      out.write("			<p>\r\n");
      out.write("				<label>좌표 X</label>\r\n");
      out.write("				<input id=\"pointX\" value=\"");
      out.print(marker.getPointX() );
      out.write("\"/>\r\n");
      out.write("			<p>\r\n");
      out.write("				<label>좌표 Y</label>\r\n");
      out.write("				<input id=\"pointY\" value=\"");
      out.print(marker.getPointY() );
      out.write("\"/>\r\n");
      out.write("			<p>\r\n");
      out.write("				<label>카테고리</label>\r\n");
      out.write("				<input id=\"category\" value=\"");
      out.print(marker.getCategory() );
      out.write("\"/>\r\n");
      out.write("			<p>\r\n");
      out.write("				<label>장소명</label>\r\n");
      out.write("				<input id=\"pointName\" value=\"");
      out.print(marker.getPointName() );
      out.write("\"/>\r\n");
      out.write("			<p>\r\n");
      out.write("				<label>전화번호</label>\r\n");
      out.write("				<input id=\"phone\" value=\"");
      out.print(marker.getPhone() );
      out.write("\"/>\r\n");
      out.write("			<p>\r\n");
      out.write("				<label>주소</label>\r\n");
      out.write("				<input id=\"address\" value=\"");
      out.print(marker.getAddress() );
      out.write("\"/>\r\n");
      out.write("			<p>\r\n");
      out.write("				<label>정보보기</label>\r\n");
      out.write("				<a href=\"#\" id=\"urlData\" target=\"_blank\">정보보기</a>\r\n");
      out.write("			<p>\r\n");
      out.write("				<label>장소설명</label>\r\n");
      out.write("				<input id=\"url\" value=\"");
      out.print(marker.getDescription() );
      out.write("\"/>\r\n");
      out.write("			<p>\r\n");
      out.write("			\r\n");
      out.write("			<button id=\"sendbtn\">전송</button>\r\n");
      out.write("		</form>\r\n");
      out.write("	</div>\r\n");
      out.write("	<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=a8fb3e9990ea2c741f7c154e957f99be&libraries=services\"></script>\r\n");
      out.write("	<script src=\"http://code.jquery.com/jquery-latest.min.js\"></script>\r\n");
      out.write("	<script>\r\n");
      out.write("	\r\n");
      out.write("	// input 태그 \r\n");
      out.write("	var id = document.querySelector(\"#markerId\");\r\n");
      out.write("	var px = document.querySelector(\"#pointX\");\r\n");
      out.write("	var py = document.querySelector(\"#pointY\");\r\n");
      out.write("	var cate = document.querySelector(\"#category\");\r\n");
      out.write("	var pn = document.querySelector(\"#pointName\");\r\n");
      out.write("	var ph = document.querySelector(\"#phone\");\r\n");
      out.write("	var addr = document.querySelector(\"#address\");\r\n");
      out.write("	var urldata = document.querySelector(\"#urlData\");\r\n");
      out.write("	var desc = document.querySelector(\"#description\");\r\n");
      out.write("	var send = document.querySelector(\"#sendbtn\");\r\n");
      out.write("	var insertKeyword = document.querySelector(\"#keyword\");\r\n");
      out.write("\r\n");
      out.write("	var saveKeyword;\r\n");
      out.write("	// 마커를 담을 배열입니다\r\n");
      out.write("	var markers = [];\r\n");
      out.write("	//dto 매핑 객체\r\n");
      out.write("	var dtoObj ={\r\n");
      out.write("			\"inputdata\":\"\",\r\n");
      out.write("			\"markerId\":\"\",\r\n");
      out.write("			\"pointX\":\"\",\r\n");
      out.write("			\"pointY\":\"\",\r\n");
      out.write("			\"category\":\"\",\r\n");
      out.write("			\"pointName\":\"\",\r\n");
      out.write("			\"phone\":\"\",\r\n");
      out.write("			\"address\":\"\",\r\n");
      out.write("			\"description\":\"\"\r\n");
      out.write("	};\r\n");
      out.write("	\r\n");
      out.write("	var mapContainer = document.getElementById('map'), // 지도를 표시할 div \r\n");
      out.write("	    mapOption = {\r\n");
      out.write("	        center: new kakao.maps.LatLng(35.2538433, 128.6402609), // 지도의 중심좌표\r\n");
      out.write("	        level: 3 // 지도의 확대 레벨\r\n");
      out.write("	    };  \r\n");
      out.write("\r\n");
      out.write("	// 지도를 생성합니다    \r\n");
      out.write("	var map = new kakao.maps.Map(mapContainer, mapOption); \r\n");
      out.write("\r\n");
      out.write("	// 장소 검색 객체를 생성합니다\r\n");
      out.write("	var ps = new kakao.maps.services.Places();  \r\n");
      out.write("\r\n");
      out.write("	// 검색 결과 목록이나 마커를 클릭했을 때 장소명을 표출할 인포윈도우를 생성합니다\r\n");
      out.write("	var infowindow = new kakao.maps.InfoWindow({zIndex:1});\r\n");
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	//이벤트 할당\r\n");
      out.write("//	var send = document.querySelector(\"#sendbtn\");\r\n");
      out.write("	send.addEventListener('click', updateData);\r\n");
      out.write("	\r\n");
      out.write("	//setInsertKey();\r\n");
      out.write("	// 키워드로 장소를 검색합니다\r\n");
      out.write("	searchPlaces();\r\n");
      out.write("\r\n");
      out.write("	// 키워드 검색을 요청하는 함수입니다\r\n");
      out.write("	function searchPlaces() {\r\n");
      out.write("		\r\n");
      out.write("	    var keyword = insertKeyword.value;\r\n");
      out.write("	    \r\n");
      out.write("	    if (!keyword.replace(/^\\s+|\\s+$/g, '')) {\r\n");
      out.write("	    //    alert('키워드를 입력해주세요!');\r\n");
      out.write("	        return false;\r\n");
      out.write("	    }\r\n");
      out.write("	    \r\n");
      out.write("	    dtoObj.inputdata = keyword;\r\n");
      out.write("	    // 장소검색 객체를 통해 키워드로 장소검색을 요청합니다\r\n");
      out.write("	    ps.keywordSearch( keyword, placesSearchCB); \r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	// 장소검색이 완료됐을 때 호출되는 콜백함수 입니다\r\n");
      out.write("	/*\r\n");
      out.write("			여기서 마커들의 배열을 받아온다.\r\n");
      out.write("	*/	\r\n");
      out.write("	function placesSearchCB(data, status, pagination) {\r\n");
      out.write("	    if (status === kakao.maps.services.Status.OK) {\r\n");
      out.write("\r\n");
      out.write("	        // 정상적으로 검색이 완료됐으면\r\n");
      out.write("	        // 검색 목록과 마커를 표출합니다\r\n");
      out.write("	        displayPlaces(data);\r\n");
      out.write("\r\n");
      out.write("	        // 페이지 번호를 표출합니다\r\n");
      out.write("	        displayPagination(pagination);\r\n");
      out.write("\r\n");
      out.write("	    } else if (status === kakao.maps.services.Status.ZERO_RESULT) {\r\n");
      out.write("\r\n");
      out.write("	        alert('검색 결과가 존재하지 않습니다.');\r\n");
      out.write("	        return;\r\n");
      out.write("\r\n");
      out.write("	    } else if (status === kakao.maps.services.Status.ERROR) {\r\n");
      out.write("\r\n");
      out.write("	        alert('검색 결과 중 오류가 발생했습니다.');\r\n");
      out.write("	        return;\r\n");
      out.write("\r\n");
      out.write("	    }\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	// 검색 결과 목록과 마커를 표출하는 함수입니다\r\n");
      out.write("	function displayPlaces(places) {\r\n");
      out.write("\r\n");
      out.write("	    var listEl = document.getElementById('placesList'), \r\n");
      out.write("	    menuEl = document.getElementById('menu_wrap'),\r\n");
      out.write("	    fragment = document.createDocumentFragment(), \r\n");
      out.write("	    bounds = new kakao.maps.LatLngBounds(), \r\n");
      out.write("	    listStr = '';\r\n");
      out.write("	    \r\n");
      out.write("	    // 검색 결과 목록에 추가된 항목들을 제거합니다\r\n");
      out.write("	    removeAllChildNods(listEl);\r\n");
      out.write("\r\n");
      out.write("	    // 지도에 표시되고 있는 마커를 제거합니다\r\n");
      out.write("	    removeMarker();\r\n");
      out.write("	    \r\n");
      out.write("	    for ( var i=0; i<places.length; i++ ) {\r\n");
      out.write("	    	\r\n");
      out.write("	        // 마커를 생성하고 지도에 표시합니다\r\n");
      out.write("	        var placePosition = new kakao.maps.LatLng(places[i].y, places[i].x);\r\n");
      out.write("//	            marker = addMarker(placePosition, i),\r\n");
      out.write("			//마커 생성 --- (원본)함수구현\r\n");
      out.write("			var imageSrc = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png', // 마커 이미지 url, 스프라이트 이미지를 씁니다\r\n");
      out.write("		        imageSize = new kakao.maps.Size(36, 37),  // 마커 이미지의 크기\r\n");
      out.write("		        imgOptions =  {\r\n");
      out.write("		            spriteSize : new kakao.maps.Size(36, 691), // 스프라이트 이미지의 크기\r\n");
      out.write("		            spriteOrigin : new kakao.maps.Point(0, (i*46)+10), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\r\n");
      out.write("		            offset: new kakao.maps.Point(13, 37) // 마커 좌표에 일치시킬 이미지 내에서의 좌표\r\n");
      out.write("		        },\r\n");
      out.write("		        markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imgOptions),\r\n");
      out.write("		            marker = new kakao.maps.Marker({\r\n");
      out.write("		            position: placePosition, // 마커의 위치\r\n");
      out.write("		            image: markerImage \r\n");
      out.write("		        });\r\n");
      out.write("	\r\n");
      out.write("			    marker.setMap(map); // 지도 위에 마커를 표출합니다\r\n");
      out.write("			    markers.push(marker);  // 배열에 생성된 마커를 추가합니다\r\n");
      out.write("\r\n");
      out.write("	            itemEl = getListItem(i, places[i]); // 검색 결과 항목 Element를 생성합니다\r\n");
      out.write("     			\r\n");
      out.write("	            //********************  함수 삽입 ********************\r\n");
      out.write("	            // 마커 클릭 시, 위치 정보가 input태그에 바로 삽입될 수 있게하는 함수\r\n");
      out.write("	            setInputValue(marker, places[i]);\r\n");
      out.write("				\r\n");
      out.write("	            setEventList(itemEl, places[i]);\r\n");
      out.write("\r\n");
      out.write("	            \r\n");
      out.write("	        // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해\r\n");
      out.write("	        // LatLngBounds 객체에 좌표를 추가합니다\r\n");
      out.write("	        bounds.extend(placePosition);\r\n");
      out.write("\r\n");
      out.write("	        // 마커와 검색결과 항목에 mouseover 했을때\r\n");
      out.write("	        // 해당 장소에 인포윈도우에 장소명을 표시합니다\r\n");
      out.write("	        // mouseout 했을 때는 인포윈도우를 닫습니다\r\n");
      out.write("	        (function(marker, title) {\r\n");
      out.write("	            kakao.maps.event.addListener(marker, 'mouseover', function() {\r\n");
      out.write("	                displayInfowindow(marker, title);\r\n");
      out.write("	            });\r\n");
      out.write("\r\n");
      out.write("	            kakao.maps.event.addListener(marker, 'mouseout', function() {\r\n");
      out.write("	                infowindow.close();\r\n");
      out.write("	            });\r\n");
      out.write("\r\n");
      out.write("	            itemEl.onmouseover =  function () {\r\n");
      out.write("	                displayInfowindow(marker, title);\r\n");
      out.write("	            };\r\n");
      out.write("\r\n");
      out.write("	            itemEl.onmouseout =  function () {\r\n");
      out.write("	                infowindow.close();\r\n");
      out.write("	            };\r\n");
      out.write("	        })(marker, places[i].place_name);\r\n");
      out.write("	        \r\n");
      out.write("	        \r\n");
      out.write("	        fragment.appendChild(itemEl);\r\n");
      out.write("	    }\r\n");
      out.write("		\r\n");
      out.write("	    // 검색결과 항목들을 검색결과 목록 Element에 추가합니다\r\n");
      out.write("	    listEl.appendChild(fragment);\r\n");
      out.write("	    menuEl.scrollTop = 0;\r\n");
      out.write("\r\n");
      out.write("	    // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다\r\n");
      out.write("	    map.setBounds(bounds);\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	// 검색결과 항목을 Element로 반환하는 함수입니다\r\n");
      out.write("	function getListItem(index, places) {\r\n");
      out.write("\r\n");
      out.write("	    var el = document.createElement('li'),\r\n");
      out.write("	    itemStr = '<span class=\"markerbg marker_' + (index+1) + '\"></span>' +\r\n");
      out.write("	                '<div class=\"info\">' +\r\n");
      out.write("	                '   <h5>' + places.place_name + '</h5>';\r\n");
      out.write("\r\n");
      out.write("	    if (places.road_address_name) {\r\n");
      out.write("	        itemStr += '    <span>' + places.road_address_name + '</span>' +\r\n");
      out.write("	                    '   <span class=\"jibun gray\">' +  places.address_name  + '</span>';\r\n");
      out.write("	    } else {\r\n");
      out.write("	        itemStr += '    <span>' +  places.address_name  + '</span>'; \r\n");
      out.write("	    }\r\n");
      out.write("	                 \r\n");
      out.write("	      itemStr += '  <span class=\"tel\">' + places.phone  + '</span>' +\r\n");
      out.write("	                '</div>';           \r\n");
      out.write("\r\n");
      out.write("	    el.innerHTML = itemStr;\r\n");
      out.write("	    el.className = 'item';\r\n");
      out.write("\r\n");
      out.write("	    return el;\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	// 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다\r\n");
      out.write("	// 원래 함수로 사용하고 있었으나 현재는 밖으로 꺼내 사용하지 않고 있음\r\n");
      out.write("/*	\r\n");
      out.write("	function addMarker(position, idx, title) {\r\n");
      out.write("	    var imageSrc = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png', // 마커 이미지 url, 스프라이트 이미지를 씁니다\r\n");
      out.write("	        imageSize = new kakao.maps.Size(36, 37),  // 마커 이미지의 크기\r\n");
      out.write("	        imgOptions =  {\r\n");
      out.write("	            spriteSize : new kakao.maps.Size(36, 691), // 스프라이트 이미지의 크기\r\n");
      out.write("	            spriteOrigin : new kakao.maps.Point(0, (idx*46)+10), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\r\n");
      out.write("	            offset: new kakao.maps.Point(13, 37) // 마커 좌표에 일치시킬 이미지 내에서의 좌표\r\n");
      out.write("	        },\r\n");
      out.write("	        markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imgOptions),\r\n");
      out.write("	            marker = new kakao.maps.Marker({\r\n");
      out.write("	            position: position, // 마커의 위치\r\n");
      out.write("	            image: markerImage \r\n");
      out.write("	        });\r\n");
      out.write("\r\n");
      out.write("	    marker.setMap(map); // 지도 위에 마커를 표출합니다\r\n");
      out.write("	    markers.push(marker);  // 배열에 생성된 마커를 추가합니다\r\n");
      out.write("\r\n");
      out.write("	    return marker;\r\n");
      out.write("	}\r\n");
      out.write("*/\r\n");
      out.write("	// 지도 위에 표시되고 있는 마커를 모두 제거합니다\r\n");
      out.write("	function removeMarker() {\r\n");
      out.write("	    for ( var i = 0; i < markers.length; i++ ) {\r\n");
      out.write("	        markers[i].setMap(null);\r\n");
      out.write("	    }   \r\n");
      out.write("	    markers = [];\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	// 검색결과 목록 하단에 페이지번호를 표시는 함수입니다\r\n");
      out.write("	function displayPagination(pagination) {\r\n");
      out.write("	    var paginationEl = document.getElementById('pagination'),\r\n");
      out.write("	        fragment = document.createDocumentFragment(),\r\n");
      out.write("	        i; \r\n");
      out.write("\r\n");
      out.write("	    // 기존에 추가된 페이지번호를 삭제합니다\r\n");
      out.write("	    while (paginationEl.hasChildNodes()) {\r\n");
      out.write("	        paginationEl.removeChild (paginationEl.lastChild);\r\n");
      out.write("	    }\r\n");
      out.write("\r\n");
      out.write("	    for (i=1; i<=pagination.last; i++) {\r\n");
      out.write("	        var el = document.createElement('a');\r\n");
      out.write("	        el.href = \"#\";\r\n");
      out.write("	        el.innerHTML = i;\r\n");
      out.write("\r\n");
      out.write("	        if (i===pagination.current) {\r\n");
      out.write("	            el.className = 'on';\r\n");
      out.write("	        } else {\r\n");
      out.write("	            el.onclick = (function(i) {\r\n");
      out.write("	                return function() {\r\n");
      out.write("	                    pagination.gotoPage(i);\r\n");
      out.write("	                }\r\n");
      out.write("	            })(i);\r\n");
      out.write("	        }\r\n");
      out.write("\r\n");
      out.write("	        fragment.appendChild(el);\r\n");
      out.write("	    }\r\n");
      out.write("	    paginationEl.appendChild(fragment);\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	// 검색결과 목록 또는 마커를 클릭했을 때 호출되는 함수입니다\r\n");
      out.write("	// 인포윈도우에 장소명을 표시합니다\r\n");
      out.write("	function displayInfowindow(marker, title) {\r\n");
      out.write("	    var content = '<div style=\"padding:5px;z-index:1;\">' + title + '</div>';\r\n");
      out.write("\r\n");
      out.write("	    infowindow.setContent(content);\r\n");
      out.write("	    infowindow.open(map, marker);\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	 // 검색결과 목록의 자식 Element를 제거하는 함수입니다\r\n");
      out.write("	function removeAllChildNods(el) {   \r\n");
      out.write("	    while (el.hasChildNodes()) {\r\n");
      out.write("	        el.removeChild (el.lastChild);\r\n");
      out.write("	    }\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	function setEventList(list, data){\r\n");
      out.write("		list.onclick = function(){\r\n");
      out.write("	        pn.value = data.place_name;\r\n");
      out.write("	    	px.value = data.x;\r\n");
      out.write("	    	py.value = data.y;\r\n");
      out.write("	    	addr.value = data.address_name;\r\n");
      out.write("	    	ph.value = data.phone;\r\n");
      out.write("	    	cate.value = data.category_name;\r\n");
      out.write("	    	urldata.href = data.place_url;\r\n");
      out.write("	    	setDTO(data);\r\n");
      out.write("	     };\r\n");
      out.write("	}\r\n");
      out.write("	 \r\n");
      out.write("	function setInputValue(marker, data){\r\n");
      out.write("		/*\r\n");
      out.write("		Document data \r\n");
      out.write("			이름					타입			설명\r\n");
      out.write("			id					String		장소 ID\r\n");
      out.write("			place_name			String		장소명, 업체명\r\n");
      out.write("			category_name		String		카테고리 이름\r\n");
      out.write("			category_group_code	String		중요 카테고리만 그룹핑한 카테고리 그룹 코드\r\n");
      out.write("			category_group_name	String		중요 카테고리만 그룹핑한 카테고리 그룹명\r\n");
      out.write("			phone				String		전화번호\r\n");
      out.write("			address_name		String		전체 지번 주소\r\n");
      out.write("			road_address_name	String		전체 도로명 주소\r\n");
      out.write("			x					String		X 좌표값, 경위도인 경우 longitude (경도)\r\n");
      out.write("			y					String		Y 좌표값, 경위도인 경우 latitude(위도)\r\n");
      out.write("			place_url			String		장소 상세페이지 URL\r\n");
      out.write("			distance			String		중심좌표까지의 거리 (단, x,y 파라미터를 준 경우에만 존재)\r\n");
      out.write("			단위 meter\r\n");
      out.write("		*/	\r\n");
      out.write("		kakao.maps.event.addListener(marker,'click', function(){\r\n");
      out.write("			//id.value = data.id;\r\n");
      out.write("			pn.value = data.place_name;\r\n");
      out.write("			px.value = data.x;\r\n");
      out.write("			py.value = data.y;\r\n");
      out.write("			addr.value = data.address_name;\r\n");
      out.write("			ph.value = data.phone;\r\n");
      out.write("			cate.value = data.category_name;\r\n");
      out.write("			urldata.href = data.place_url;\r\n");
      out.write("			desc.value = data.place_url;\r\n");
      out.write("			setDTO(data);\r\n");
      out.write("		});\r\n");
      out.write("	} \r\n");
      out.write("	function setDTO(data){\r\n");
      out.write("		dtoObj.markerId = data.markerId,\r\n");
      out.write("		dtoObj.pointX = data.x;\r\n");
      out.write("		dtoObj.pointY = data.y;\r\n");
      out.write("		dtoObj.category = data.category_name;\r\n");
      out.write("		dtoObj.pointName = data.place_name;\r\n");
      out.write("		dtoObj.phone = data.phone;\r\n");
      out.write("		dtoObj.address = data.address_name;\r\n");
      out.write("		dtoObj.description = data.place_url;\r\n");
      out.write("	}	\r\n");
      out.write("	\r\n");
      out.write("	function setDTObefore(){\r\n");
      out.write("		console.log(id.value);\r\n");
      out.write("		dtoObj.markerId = id.value;\r\n");
      out.write("		dtoObj.pointX = px.value;\r\n");
      out.write("		dtoObj.pointY = py.value;\r\n");
      out.write("		dtoObj.category = cate.value;\r\n");
      out.write("		dtoObj.pointName = pn.value;\r\n");
      out.write("		dtoObj.phone = ph.value;\r\n");
      out.write("		dtoObj.address = addr.value;\r\n");
      out.write("		dtoObj.description = urldata.value;\r\n");
      out.write("	}	\r\n");
      out.write("	\r\n");
      out.write("	function updateData(event){\r\n");
      out.write("		 event.preventDefault();\r\n");
      out.write("		 setDTObefore();\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			url : \"/FoodTrip/marker/editexecute\",\r\n");
      out.write("			type : \"post\",\r\n");
      out.write("			data : JSON.stringify(dtoObj),\r\n");
      out.write("			contentType : \"application/json\",\r\n");
      out.write("			success : function(response){\r\n");
      out.write("				alert(\"마커 수정완료\");\r\n");
      out.write("				console.log(response);\r\n");
      out.write("				location.href=\"/FoodTrip/marker/readalljson\"\r\n");
      out.write("				//insertKeyword.value = response.inputdata;\r\n");
      out.write("				//$(\"#keyword\").val(response.inputdata);\r\n");
      out.write("			},\r\n");
      out.write("			error : function(){\r\n");
      out.write("				alert(\"마커 입력 에러\")\r\n");
      out.write("			}\r\n");
      out.write("		});\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	function setInsertKey(){\r\n");
      out.write("		insertKeyword.value = saveKeyword;\r\n");
      out.write("	}\r\n");
      out.write("	</script>\r\n");
      out.write("	\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
