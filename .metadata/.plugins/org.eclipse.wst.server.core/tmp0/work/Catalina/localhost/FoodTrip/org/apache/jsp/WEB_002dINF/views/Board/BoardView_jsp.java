/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.97
 * Generated at: 2024-12-23 07:11:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.Board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.spring.domain.*;
import java.util.List;
import com.spring.domain.Member;

public final class BoardView_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/WEB-INF/views/menu/menu.jsp", Long.valueOf(1734570015218L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("com.spring.domain");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.spring.domain.Member");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, false, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <title>게시글 상세보기</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/FoodTrip/resources/css/bootstrap.min.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

   HttpSession session = request.getSession(false);
   Member sessionId = null;
   String adminCheck = null;
   if(session != null){
      sessionId = (Member)session.getAttribute("sessionId");
      adminCheck = (String)sessionId.getNickName();
      System.out.println("게시글 작성 폼 세션 널아님!!");
      System.out.println("닉네임 : " + sessionId.getNickName());
      System.out.println("sessionIdCheck : " + sessionId != null);
      System.out.println("adminCheck : " + adminCheck.equals("admin"));
   }

      out.write("\r\n");
      out.write("\r\n");
      out.write("<div style=\"display:flex\">\r\n");
   if(sessionId != null && adminCheck.equals("admin")){ 
      out.write("\r\n");
      out.write("   <div id=\"menublock\">\r\n");
      out.write("      <a href=\"/FoodTrip/marker/test\">마커 생성</a>\r\n");
      out.write("      <a href=\"/FoodTrip/marker/readalljson\">마커 전체 가져오기</a>\r\n");
      out.write("      <a href=\"/FoodTrip/road/makeRoad\">코스 생성</a>\r\n");
      out.write("   </div>\r\n");
      out.write("   ");
} 
      out.write("\r\n");
      out.write("   <div id=\"menublock\">\r\n");
      out.write("      <a href=\"/FoodTrip/road/readRoad\">코스 전체보기</a>\r\n");
      out.write("      <a href=\"/FoodTrip/board/boards\">리뷰게시판</a>\r\n");
      out.write("   </div>\r\n");
      out.write("   <div id=\"menublock\">\r\n");
      out.write("      ");

      if(sessionId != null && sessionId.getNickName() != null && !sessionId.getNickName().isEmpty()){
      
      out.write("\r\n");
      out.write("         <a href=\"/FoodTrip/member/logout\">로그아웃</a>\r\n");
      out.write("         <a href=\"/FoodTrip/member/update\">회원정보수정</a>\r\n");
      out.write("      ");
}else{
      out.write("\r\n");
      out.write("         <a href=\"/FoodTrip/member/login\">로그인</a>\r\n");
      out.write("         <a href=\"/FoodTrip/member/email\">회원가입</a>\r\n");
      out.write("      ");
} 
      out.write("\r\n");
      out.write("   </div>\r\n");
      out.write("</div>");
      out.write("\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("        ");
 
	        Board board = (Board) request.getAttribute("board");
	        List<Board> comments = (List<Board>) request.getAttribute("comments");
        	System.out.println("코멘트 : " + comments);
    	    for(int i=0; i<comments.size(); i++) {
    	    	int depth = comments.get(i).getDepth();
    	    	//System.out.println("조회뎁스" + depth);
    	    }
    	    BoardLike brk = (BoardLike)request.getAttribute("boardLike");
 			String brkNick = null;
    	    if(brk!=null){
    	    	brkNick = brk.getNickName();
    	    	System.out.println("들어옴 : " + brk.getNickName());
    	    }    	    
    	    
    	    System.out.println("세션아이디의 닉네임 : " + sessionId.getNickName());
    	    System.out.println("세션아이디와 좋아요 닉네임이 같지 않다면");
    	    System.out.println(sessionId.getNickName().equals(brkNick));
    	    System.out.println("좋아요 DB에 세션 닉이 없다면");
    	    System.out.println(!sessionId.getNickName().equals(brkNick));
    	    System.out.println("내용 : " + board.getContent());
        
      out.write("\r\n");
      out.write("		<!-- 게시글 부분 ( 제목, 내용, 작성자, 작성일, 수정일, 조회수, 좋아요 버튼기능 구현 ) -->\r\n");
      out.write("        <h1>");
      out.print( board.getTitle() );
      out.write("</h1>\r\n");
      out.write("        <p>");
if(board.getFileName() != null) { 
      out.write("\r\n");
      out.write("     			  <img src=\"");
      out.print(request.getContextPath());
      out.write("/resources/images/");
      out.print(board.getFileName());
      out.write("\" style=\"width:20%\"/>\r\n");
      out.write(" 			");
 } 
      out.write("\r\n");
      out.write("        </p>\r\n");
      out.write("        <p>");
      out.print(board.getContent());
      out.write("\r\n");
      out.write("        	\r\n");
      out.write("        <p>\r\n");
      out.write("        	<small class=\"text-muted\">\r\n");
      out.write("        			작성자: ");
      out.print( board.getNickName());
      out.write(" | \r\n");
      out.write("        			작성일: ");
      out.print( board.getCreateTime());
      out.write("  \r\n");
      out.write("        			");
if(board.getUpdateDay() != null){
        				out.println(" | 수정일: " + board.getUpdateDay());	
        			}
      out.write(" | \r\n");
      out.write("        			조회수: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${board.getViews()}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(" |\r\n");
      out.write("        			좋아요: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${board.getLikes()}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\r\n");
      out.write("        			");
if(sessionId.getNickName().equals(brkNick)){ 
      out.write("\r\n");
      out.write("        			<button id=\"cancelBtn\" data-brdNum=\"");
      out.print(board.getBrdNum());
      out.write("\" data-nick=\"");
      out.print(sessionId.getNickName());
      out.write("\">\r\n");
      out.write("        				<i class=\"fa-solid fa-heart\" style=\"color:pink\"></i>\r\n");
      out.write("        			</button>\r\n");
      out.write("        			");
}else if(!sessionId.getNickName().equals(brkNick)){ 
      out.write("\r\n");
      out.write("        			<button id=\"likeBtn\" data-brdNum=\"");
      out.print(board.getBrdNum());
      out.write("\" data-nick=\"");
      out.print(sessionId.getNickName());
      out.write("\">\r\n");
      out.write("        				<i class=\"fa-regular fa-heart\"></i>\r\n");
      out.write("        			</button>\r\n");
      out.write("        			");
} 
      out.write("\r\n");
      out.write("        	</small>\r\n");
      out.write("        </p>\r\n");
      out.write("        <!-- 게시글 수정/삭제 버튼 기능 구현 -->\r\n");
      out.write("        ");
 if (sessionId != null && sessionId.getNickName().equals(board.getNickName())) { 
      out.write("\r\n");
      out.write("            <a href=\"/FoodTrip/board/updateBoard?num=");
      out.print( board.getBrdNum() );
      out.write("\" class=\"btn btn-primary\">수정</a>\r\n");
      out.write("            <a href=\"/FoodTrip/board/deleteBoard?num=");
      out.print( board.getBrdNum() );
      out.write("\" class=\"btn btn-danger\" onclick=\"return confirm('정말 삭제하시겠습니까?');\">삭제</a>\r\n");
      out.write("        ");
 } 
      out.write(" \r\n");
      out.write("        <!-- 게시글의 관리자 삭제 버튼 기능 구현 -->\r\n");
      out.write("        ");
 if(sessionId != null && sessionId.getNickName().equals("admin")){ 
      out.write("\r\n");
      out.write("        	<a href=\"/FoodTrip/board/deleteBoard?num=");
      out.print( board.getBrdNum());
      out.write("\" class=\"btn btn-warning\" onclick=\"return confirm('관리자 권한으로 삭제하시겠습니까?');\">관리자 삭제</a>\r\n");
      out.write("        ");
 } 
      out.write("\r\n");
      out.write("        <hr>\r\n");
      out.write("\r\n");
      out.write("		<!-- 댓글 입력 -->\r\n");
      out.write("        <div>\r\n");
      out.write("            <textarea id=\"commentContent\" class=\"form-control mb-2\" placeholder=\"댓글을 입력하세요\"></textarea>\r\n");
      out.write("            <button id=\"addComment\" class=\"btn btn-primary\" data-parent=\"");
      out.print(board.getBrdNum());
      out.write("\" data-depth=\"2\" data-nick=\"");
      out.print(sessionId.getNickName());
      out.write("\">댓글 작성</button>\r\n");
      out.write("        </div>\r\n");
      out.write("        <hr>\r\n");
      out.write("\r\n");
      out.write("        <!-- 댓글 목록 -->\r\n");
      out.write("        <h4>댓글</h4>\r\n");
      out.write("        ");
 for (int i = 0; i < comments.size(); i++) {
            Board comment = comments.get(i);
            //System.out.println("뎁스 : " + comment.getDepth());
        	if(comment.getDepth()==2 && !comment.getContent().equals("삭제된 메시지입니다")){
        
      out.write("	<!-- DB에 저장된 댓글의 내용이 \"삭제된 메시지입니다\"가 아닐때, 작성자, 내용, 작성일, 답글 기능 구현 -->\r\n");
      out.write("	       	<div class=\"mb-3\" style=\"margin-left:20px;\">\r\n");
      out.write("			    <p class=\"commentContent\">");
      out.print( comment.getContent() );
      out.write("</p>\r\n");
      out.write("			    <p><small class=\"text-muted\">작성자: ");
      out.print( comment.getNickName() );
      out.write(" | 작성일: ");
      out.print( comment.getCreateTime() );
      out.write("</small></p>	\r\n");
      out.write("				<button class=\"btn btn-sm btn-secondary replyButton\" \r\n");
      out.write("	        			data-id=\"");
      out.print( comment.getBrdNum() );
      out.write("\" data-depth=\"3\">답글</button>\r\n");
      out.write("			    <!-- 로그인한 계정(=sessionId)가 댓글 작성자와 닉네임이 동일할 때, 수정 및 삭제 버튼 출력 -->\r\n");
      out.write("			    ");
 if (sessionId != null && sessionId.getNickName().equals(comment.getNickName())) { 
      out.write("\r\n");
      out.write("			        <button class=\"btn btn-sm btn-secondary editComment\" data-id=\"");
      out.print( comment.getBrdNum() );
      out.write("\">수정</button>\r\n");
      out.write("			        <button class=\"btn btn-sm btn-danger deleteComment\" data-id=\"");
      out.print( comment.getBrdNum() );
      out.write("\">삭제</button>\r\n");
      out.write("			    ");
 } 
      out.write("\r\n");
      out.write("			    <!-- 로그인한 계정(=sessionId)가 닉네임이 admin일 때, 관리자 삭제 버튼 기능 구현 -->\r\n");
      out.write("				");
 if(sessionId != null && sessionId.getNickName().equals("admin")){ 
      out.write("\r\n");
      out.write("		       		<button class=\"btn btn-sm btn-danger deleteComment\" data-id=\"");
      out.print( comment.getBrdNum() );
      out.write("\">관리자 삭제</button>\r\n");
      out.write("		       	");
 } 
      out.write("\r\n");
      out.write("			    <!-- 수정 입력 영역 (동적 추가) -->\r\n");
      out.write("			    <div class=\"editSection\" style=\"display: none;\">\r\n");
      out.write("			        <textarea class=\"form-control editTextarea\"></textarea>\r\n");
      out.write("			        <button class=\"btn btn-sm btn-primary saveEdit\" data-id=\"");
      out.print( comment.getBrdNum() );
      out.write("\">저장</button>\r\n");
      out.write("			        <button class=\"btn btn-sm btn-secondary cancelEdit\">취소</button>\r\n");
      out.write("			    </div>\r\n");
      out.write("	    	</div>\r\n");
      out.write("	        <hr>\r\n");
      out.write("	        ");

	        }else if(comment.getDepth()==2 &&comment.getContent().equals("삭제된 메시지입니다")){
      out.write("\r\n");
      out.write("	        	<div class=\"mb-3\" style=\"margin-left:20px;\">삭제된 메시지입니다</div>\r\n");
      out.write("	        	<hr>\r\n");
      out.write("	        ");
 }       
        		else if(comment.getDepth()==3 && !comment.getContent().equals("삭제된 메시지입니다")){
      out.write("\r\n");
      out.write("        		<!-- DB에 저장된 답글의 내용이 \"삭제된 메시지입니다\"가 아닐때, 작성자, 내용, 작성일, 답글 기능 구현 -->\r\n");
      out.write("        		<div class=\"mb-3\" style=\"margin-left:40px;\">\r\n");
      out.write("				    <p class=\"commentContent\">");
      out.print( comment.getContent() );
      out.write("</p>\r\n");
      out.write("				    <p><small class=\"text-muted\">작성자: ");
      out.print( comment.getNickName() );
      out.write(" | 작성일: ");
      out.print( comment.getCreateTime() );
      out.write("</small></p>\r\n");
      out.write("					<button class=\"btn btn-sm btn-secondary replyButton\" \r\n");
      out.write("		        			data-id=\"");
      out.print( comment.getBrdNum() );
      out.write("\" data-depth=\"3\">답글</button>\r\n");
      out.write("				    <!-- 로그인한 계정(=sessionId)가 답글 작성자와 닉네임이 동일할 때, 수정 및 삭제 버튼 출력 -->\r\n");
      out.write("				    ");
 if (sessionId != null && sessionId.getNickName().equals(comment.getNickName())) { 
      out.write("\r\n");
      out.write("				        <button class=\"btn btn-sm btn-secondary editComment\" data-id=\"");
      out.print( comment.getBrdNum() );
      out.write("\">수정</button>\r\n");
      out.write("				        <button class=\"btn btn-sm btn-danger deleteComment\" data-id=\"");
      out.print( comment.getBrdNum() );
      out.write("\">삭제</button>\r\n");
      out.write("				    ");
 } 
      out.write("\r\n");
      out.write("				    <!-- 로그인한 계정(=sessionId)가 닉네임이 admin일 때, 관리자 삭제 버튼 기능 구현 -->\r\n");
      out.write("					");
 if(sessionId != null && sessionId.getNickName().equals("admin")){ 
      out.write("\r\n");
      out.write("		       			<button class=\"btn btn-sm btn-danger deleteComment\" data-id=\"");
      out.print( comment.getBrdNum() );
      out.write("\">관리자 삭제</button>\r\n");
      out.write("		       		");
 } 
      out.write("\r\n");
      out.write("				    <!-- 수정 입력 영역 (동적 추가) -->\r\n");
      out.write("				    <div class=\"editSection\" style=\"display: none;\">\r\n");
      out.write("				        <textarea class=\"form-control editTextarea\"></textarea>\r\n");
      out.write("				        <button class=\"btn btn-sm btn-primary saveEdit\" data-id=\"");
      out.print( comment.getBrdNum() );
      out.write("\">저장</button>\r\n");
      out.write("				        <button class=\"btn btn-sm btn-secondary cancelEdit\">취소</button>\r\n");
      out.write("				    </div>\r\n");
      out.write("	    		</div>\r\n");
      out.write("		       	<hr>\r\n");
      out.write("		       	<!-- DB에 저장된 내용이 \"삭제된 메시지입니다\"일 때  삭제된 메시지입니다를 출력 / 댓글 및 수정, 삭제 버튼 출력x -->\r\n");
      out.write("		       	");
}else if(comment.getDepth()==3 && comment.getContent().equals("삭제된 메시지입니다")){ 
      out.write("\r\n");
      out.write("		       		<div class=\"mb-3\" style=\"margin-left:40px;\">삭제된 메시지입니다</div>\r\n");
      out.write("		       		<hr>\r\n");
      out.write("		       	");
	}
	        	} 
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <!-- JavaScript for 댓글 AJAX -->\r\n");
      out.write("    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\r\n");
      out.write("    <script src=\"/FoodTrip/resources/js/board.js?version=58\" type=\"text/javascript\"></script>\r\n");
      out.write("    <!-- Font Awesome -->\r\n");
      out.write("    <script src=\"https://kit.fontawesome.com/08b7540d84.js\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("    </div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
