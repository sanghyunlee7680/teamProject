<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc 
		https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans 
		https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context 
		https://www.springframework.org/schema/context/spring-context.xsd">
	
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- 핸들러매핑과 핸들러어댑터를 자동으로 객체 생성함 -->
	<annotation-driven/>
	

	<!-- css, img, js와 같은 공유되는 파일의 위치를 정하고 mvc의 처리를 실시함 -->
	<resources mapping="/resources/**" location="/resources/" />
	<!-- 명시해줘야 한다. -->

	<!-- 뷰 리졸브 객체 add라는 문자열을 받으면 /WEB-INF/views/add.jsp라는 경로를 반환해준다. -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- com.springmvc.* 이라고 표시하면 해당 패키지의 모든 클래스의 객체를 만들어서 보관 후 자동주입한다. -->
	<context:component-scan base-package="com.spring.*" />
	
	<!-- 데이터베이스 -->
	<beans:bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<beans:property name="driverClassName" value="com.mysql.jdbc.Driver"/>
		<beans:property name="url" value="jdbc:mysql://localhost:3306/FoodTripDB?serverTimezone=UTC"/>
		<beans:property name="username" value="root"/>
		<beans:property name="password" value="1234"/>
	</beans:bean>
	
	<beans:bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<beans:property name="dataSource" ref="dataSource"/>
	</beans:bean>


	<!-- MultipartFile -->
		
	<beans:bean id="multipartResolver"  class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="10240000"/>
<!-- 	<beans:property name="defaultEncoding" value="utf-8"/>
		<beans:property name="uploadTempDir" ref="uploadDirResource"/> -->
	</beans:bean>
	<!-- 
	<beans:bean id="uploadDirResource" class="org.springframework.core.io.FileSystemResource">
		<beans:constructor-arg value="c:/upload/"/>
	</beans:bean>
 	-->
 	<!-- 이메일 전송 객체 -->
    <beans:bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <beans:property name="host" value="smtp.gmail.com" />
        <beans:property name="port" value="587" />
        <beans:property name="username" value="soledd54@gmail.com" /> <!-- e-mail 계정 입력 -->
        <beans:property name="password" value="sfbj oklp gizq hxrv" /> <!-- 앱 비밀번호 입력 -->
        <beans:property name="defaultEncoding" value="utf-8" />
        <beans:property name="javaMailProperties">
            <beans:props>
                <beans:prop key="mail.transport.protocol">smtp</beans:prop>
                <beans:prop key="mail.smtp.auth">true</beans:prop>
                <beans:prop key="mail.smtp.starttls.enable">true</beans:prop>
                <beans:prop key="mail.smtp.ssl.enable">false</beans:prop>
                <beans:prop key="mail.debug">true</beans:prop>
                <beans:prop key="mail.smtp.ssl.trust">smtp.gmail.com</beans:prop>
                <beans:prop key="mail.smtp.ssl.protocols">TLSv1.2</beans:prop>
            </beans:props>
        </beans:property>   
    </beans:bean>
</beans:beans>
